// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/crypto/keyring/types.proto

package keyring

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PubKeyType int32

const (
	PubKeyType_MultiType     PubKeyType = 0
	PubKeyType_Secp256k1Type PubKeyType = 1
	PubKeyType_Ed25519Type   PubKeyType = 2
	PubKeyType_Sr25519Type   PubKeyType = 3
)

var PubKeyType_name = map[int32]string{
	0: "MultiType",
	1: "Secp256k1Type",
	2: "Ed25519Type",
	3: "Sr25519Type",
}

var PubKeyType_value = map[string]int32{
	"MultiType":     0,
	"Secp256k1Type": 1,
	"Ed25519Type":   2,
	"Sr25519Type":   3,
}

func (x PubKeyType) String() string {
	return proto.EnumName(PubKeyType_name, int32(x))
}

func (PubKeyType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_46feab99abea8f51, []int{0}
}

type KeyringEntry struct {
	Name   string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PubKey *types.Any `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	// Types that are valid to be assigned to Item:
	//	*KeyringEntry_Local
	//	*KeyringEntry_Ledger
	//	*KeyringEntry_Offline
	//	*KeyringEntry_Multi
	Item isKeyringEntry_Item `protobuf_oneof:"item"`
}

func (m *KeyringEntry) Reset()         { *m = KeyringEntry{} }
func (m *KeyringEntry) String() string { return proto.CompactTextString(m) }
func (*KeyringEntry) ProtoMessage()    {}
func (*KeyringEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_46feab99abea8f51, []int{0}
}
func (m *KeyringEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KeyringEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KeyringEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KeyringEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyringEntry.Merge(m, src)
}
func (m *KeyringEntry) XXX_Size() int {
	return m.Size()
}
func (m *KeyringEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyringEntry.DiscardUnknown(m)
}

var xxx_messageInfo_KeyringEntry proto.InternalMessageInfo

type isKeyringEntry_Item interface {
	isKeyringEntry_Item()
	MarshalTo([]byte) (int, error)
	Size() int
}

type KeyringEntry_Local struct {
	Local *LocalInfo `protobuf:"bytes,3,opt,name=local,proto3,oneof" json:"local,omitempty"`
}
type KeyringEntry_Ledger struct {
	Ledger *LedgerInfo `protobuf:"bytes,4,opt,name=ledger,proto3,oneof" json:"ledger,omitempty"`
}
type KeyringEntry_Offline struct {
	Offline *OfflineInfo `protobuf:"bytes,5,opt,name=offline,proto3,oneof" json:"offline,omitempty"`
}
type KeyringEntry_Multi struct {
	Multi *MultiInfo `protobuf:"bytes,6,opt,name=multi,proto3,oneof" json:"multi,omitempty"`
}

func (*KeyringEntry_Local) isKeyringEntry_Item()   {}
func (*KeyringEntry_Ledger) isKeyringEntry_Item()  {}
func (*KeyringEntry_Offline) isKeyringEntry_Item() {}
func (*KeyringEntry_Multi) isKeyringEntry_Item()   {}

func (m *KeyringEntry) GetItem() isKeyringEntry_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *KeyringEntry) GetLocal() *LocalInfo {
	if x, ok := m.GetItem().(*KeyringEntry_Local); ok {
		return x.Local
	}
	return nil
}

func (m *KeyringEntry) GetLedger() *LedgerInfo {
	if x, ok := m.GetItem().(*KeyringEntry_Ledger); ok {
		return x.Ledger
	}
	return nil
}

func (m *KeyringEntry) GetOffline() *OfflineInfo {
	if x, ok := m.GetItem().(*KeyringEntry_Offline); ok {
		return x.Offline
	}
	return nil
}

func (m *KeyringEntry) GetMulti() *MultiInfo {
	if x, ok := m.GetItem().(*KeyringEntry_Multi); ok {
		return x.Multi
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*KeyringEntry) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*KeyringEntry_Local)(nil),
		(*KeyringEntry_Ledger)(nil),
		(*KeyringEntry_Offline)(nil),
		(*KeyringEntry_Multi)(nil),
	}
}

// Item is a keyring item stored in a keyring backend.
type LocalInfo struct {
	PrivKey *types.Any `protobuf:"bytes,1,opt,name=privKey,proto3" json:"privKey,omitempty"`
	Algo    PubKeyType `protobuf:"varint,2,opt,name=algo,proto3,enum=cosmos.crypto.keyring.PubKeyType" json:"algo,omitempty"`
}

func (m *LocalInfo) Reset()      { *m = LocalInfo{} }
func (*LocalInfo) ProtoMessage() {}
func (*LocalInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_46feab99abea8f51, []int{1}
}
func (m *LocalInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LocalInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LocalInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LocalInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocalInfo.Merge(m, src)
}
func (m *LocalInfo) XXX_Size() int {
	return m.Size()
}
func (m *LocalInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LocalInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LocalInfo proto.InternalMessageInfo

type LedgerInfo struct {
	Path *BIP44Params `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Algo PubKeyType   `protobuf:"varint,2,opt,name=algo,proto3,enum=cosmos.crypto.keyring.PubKeyType" json:"algo,omitempty"`
}

func (m *LedgerInfo) Reset()      { *m = LedgerInfo{} }
func (*LedgerInfo) ProtoMessage() {}
func (*LedgerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_46feab99abea8f51, []int{2}
}
func (m *LedgerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LedgerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LedgerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LedgerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LedgerInfo.Merge(m, src)
}
func (m *LedgerInfo) XXX_Size() int {
	return m.Size()
}
func (m *LedgerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_LedgerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_LedgerInfo proto.InternalMessageInfo

type BIP44Params struct {
	Purpose     uint32 `protobuf:"varint,1,opt,name=purpose,proto3" json:"purpose,omitempty"`
	Cointype    uint32 `protobuf:"varint,2,opt,name=cointype,proto3" json:"cointype,omitempty"`
	Account     uint32 `protobuf:"varint,3,opt,name=account,proto3" json:"account,omitempty"`
	Change      bool   `protobuf:"varint,4,opt,name=change,proto3" json:"change,omitempty"`
	Adressindex uint32 `protobuf:"varint,5,opt,name=adressindex,proto3" json:"adressindex,omitempty"`
}

func (m *BIP44Params) Reset()      { *m = BIP44Params{} }
func (*BIP44Params) ProtoMessage() {}
func (*BIP44Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_46feab99abea8f51, []int{3}
}
func (m *BIP44Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BIP44Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BIP44Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BIP44Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BIP44Params.Merge(m, src)
}
func (m *BIP44Params) XXX_Size() int {
	return m.Size()
}
func (m *BIP44Params) XXX_DiscardUnknown() {
	xxx_messageInfo_BIP44Params.DiscardUnknown(m)
}

var xxx_messageInfo_BIP44Params proto.InternalMessageInfo

type OfflineInfo struct {
	Algo PubKeyType `protobuf:"varint,1,opt,name=algo,proto3,enum=cosmos.crypto.keyring.PubKeyType" json:"algo,omitempty"`
}

func (m *OfflineInfo) Reset()      { *m = OfflineInfo{} }
func (*OfflineInfo) ProtoMessage() {}
func (*OfflineInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_46feab99abea8f51, []int{4}
}
func (m *OfflineInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OfflineInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OfflineInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OfflineInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OfflineInfo.Merge(m, src)
}
func (m *OfflineInfo) XXX_Size() int {
	return m.Size()
}
func (m *OfflineInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OfflineInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OfflineInfo proto.InternalMessageInfo

type MultiInfo struct {
}

func (m *MultiInfo) Reset()      { *m = MultiInfo{} }
func (*MultiInfo) ProtoMessage() {}
func (*MultiInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_46feab99abea8f51, []int{5}
}
func (m *MultiInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultiInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultiInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultiInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultiInfo.Merge(m, src)
}
func (m *MultiInfo) XXX_Size() int {
	return m.Size()
}
func (m *MultiInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_MultiInfo.DiscardUnknown(m)
}

var xxx_messageInfo_MultiInfo proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cosmos.crypto.keyring.PubKeyType", PubKeyType_name, PubKeyType_value)
	proto.RegisterType((*KeyringEntry)(nil), "cosmos.crypto.keyring.KeyringEntry")
	proto.RegisterType((*LocalInfo)(nil), "cosmos.crypto.keyring.LocalInfo")
	proto.RegisterType((*LedgerInfo)(nil), "cosmos.crypto.keyring.LedgerInfo")
	proto.RegisterType((*BIP44Params)(nil), "cosmos.crypto.keyring.BIP44Params")
	proto.RegisterType((*OfflineInfo)(nil), "cosmos.crypto.keyring.OfflineInfo")
	proto.RegisterType((*MultiInfo)(nil), "cosmos.crypto.keyring.MultiInfo")
}

func init() { proto.RegisterFile("cosmos/crypto/keyring/types.proto", fileDescriptor_46feab99abea8f51) }

var fileDescriptor_46feab99abea8f51 = []byte{
	// 558 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0xc7, 0xed, 0xd4, 0x75, 0x9a, 0xc9, 0xe3, 0x07, 0xba, 0x2a, 0xc8, 0xe4, 0x60, 0xd2, 0x9c,
	0x2a, 0x50, 0x6d, 0x35, 0x34, 0x15, 0x2f, 0x12, 0x12, 0x91, 0x2a, 0x11, 0x02, 0x22, 0x72, 0x39,
	0x71, 0x41, 0x8e, 0xb3, 0x71, 0xac, 0xd8, 0xbb, 0x96, 0x5f, 0x50, 0x7d, 0xe4, 0x1b, 0x70, 0xe4,
	0x82, 0xc4, 0xc7, 0xa9, 0x38, 0xf5, 0xc8, 0x11, 0x92, 0x2f, 0x82, 0x3c, 0x6b, 0x27, 0x11, 0x22,
	0x1c, 0xe0, 0xe4, 0x9d, 0xf1, 0xef, 0xbf, 0x3b, 0x33, 0xfb, 0xd7, 0xc2, 0xa1, 0xcb, 0x93, 0x90,
	0x27, 0x96, 0x1b, 0xe7, 0x51, 0xca, 0xad, 0x39, 0xcd, 0x63, 0x9f, 0x79, 0x56, 0x9a, 0x47, 0x34,
	0x31, 0xa3, 0x98, 0xa7, 0x9c, 0xdc, 0x12, 0x88, 0x29, 0x10, 0xb3, 0x44, 0x5a, 0x07, 0x1e, 0xf7,
	0x38, 0x12, 0x56, 0xb1, 0x12, 0x70, 0xeb, 0x8e, 0xc7, 0xb9, 0x17, 0x50, 0x0b, 0xa3, 0x71, 0x36,
	0xb5, 0x1c, 0x96, 0x8b, 0x5f, 0x9d, 0xaf, 0x35, 0xf8, 0x6f, 0x28, 0xc4, 0xe7, 0x2c, 0x8d, 0x73,
	0x42, 0x40, 0x61, 0x4e, 0x48, 0x75, 0xb9, 0x2d, 0x1f, 0x35, 0x6c, 0x5c, 0x93, 0x63, 0xa8, 0x47,
	0xd9, 0xf8, 0xdd, 0x9c, 0xe6, 0x7a, 0xad, 0x2d, 0x1f, 0x35, 0xbb, 0x07, 0xa6, 0xd8, 0xd1, 0xac,
	0x76, 0x34, 0x9f, 0xb1, 0xdc, 0x56, 0xa3, 0x6c, 0x3c, 0xa4, 0x39, 0x79, 0x08, 0xbb, 0x01, 0x77,
	0x9d, 0x40, 0xdf, 0x41, 0xb8, 0x6d, 0xfe, 0xb6, 0x56, 0xf3, 0x65, 0xc1, 0x0c, 0xd8, 0x94, 0x3f,
	0x97, 0x6c, 0x21, 0x20, 0x4f, 0x40, 0x0d, 0xe8, 0xc4, 0xa3, 0xb1, 0xae, 0xa0, 0xf4, 0x70, 0x9b,
	0x14, 0xa1, 0x52, 0x5b, 0x4a, 0xc8, 0x53, 0xa8, 0xf3, 0xe9, 0x34, 0xf0, 0x19, 0xd5, 0x77, 0x51,
	0xdd, 0xd9, 0xa2, 0x7e, 0x2d, 0xa8, 0x52, 0x5e, 0x89, 0x8a, 0xb2, 0xc3, 0x2c, 0x48, 0x7d, 0x5d,
	0xfd, 0x63, 0xd9, 0xaf, 0x0a, 0xa6, 0x2a, 0x1b, 0x05, 0x7d, 0x15, 0x14, 0x3f, 0xa5, 0x61, 0xe7,
	0x12, 0x1a, 0xab, 0xa6, 0x88, 0x09, 0xf5, 0x28, 0xf6, 0xdf, 0x0f, 0x69, 0x8e, 0xb3, 0xdc, 0x36,
	0xb4, 0x0a, 0x22, 0x3d, 0x50, 0x9c, 0xc0, 0xe3, 0x38, 0xe1, 0xff, 0xb7, 0x76, 0x3e, 0xc2, 0x11,
	0xbf, 0xc9, 0x23, 0x6a, 0x23, 0xfe, 0x58, 0xf9, 0xf4, 0xe5, 0xae, 0xd4, 0xf9, 0x20, 0x03, 0xac,
	0x87, 0x42, 0xce, 0x40, 0x89, 0x9c, 0x74, 0x56, 0x1e, 0xbc, 0x6d, 0x0e, 0xfd, 0xc1, 0xe8, 0xf4,
	0x74, 0xe4, 0xc4, 0x4e, 0x98, 0xd8, 0xc8, 0xff, 0x5b, 0x0d, 0x9f, 0x65, 0x68, 0x6e, 0x6c, 0x49,
	0xf4, 0xc2, 0x35, 0x71, 0xc4, 0x13, 0x61, 0x26, 0xcd, 0xae, 0x42, 0xd2, 0x82, 0x3d, 0x97, 0xfb,
	0xac, 0xf0, 0x33, 0x1e, 0xa5, 0xd9, 0xab, 0xb8, 0x50, 0x39, 0xae, 0xcb, 0x33, 0x96, 0xa2, 0x7d,
	0x34, 0xbb, 0x0a, 0xc9, 0x6d, 0x50, 0xdd, 0x99, 0xc3, 0x3c, 0x8a, 0xe6, 0xd8, 0xb3, 0xcb, 0x88,
	0xb4, 0xa1, 0xe9, 0x4c, 0x62, 0x9a, 0x24, 0x3e, 0x9b, 0xd0, 0x4b, 0xbc, 0x7b, 0xcd, 0xde, 0x4c,
	0x95, 0xf5, 0xbd, 0x80, 0xe6, 0xc6, 0xcd, 0xaf, 0x7a, 0x95, 0xff, 0xa6, 0xd7, 0x7d, 0x68, 0xac,
	0x7c, 0x20, 0x52, 0xf7, 0x46, 0x00, 0x6b, 0x98, 0x68, 0x25, 0x50, 0x04, 0x37, 0x25, 0xb2, 0x0f,
	0xda, 0x05, 0x75, 0xa3, 0x6e, 0xef, 0x6c, 0x7e, 0x82, 0x29, 0x99, 0xdc, 0x80, 0xe6, 0xf9, 0xa4,
	0xdb, 0xeb, 0x9d, 0x3c, 0xc2, 0x44, 0xad, 0x48, 0x5c, 0xc4, 0xeb, 0xc4, 0x4e, 0x7f, 0x70, 0xf5,
	0xc3, 0x90, 0xae, 0x16, 0x86, 0x7c, 0xbd, 0x30, 0xe4, 0xef, 0x0b, 0x43, 0xfe, 0xb8, 0x34, 0xa4,
	0xeb, 0xa5, 0x21, 0x7d, 0x5b, 0x1a, 0xd2, 0xdb, 0xfb, 0x9e, 0x9f, 0xce, 0xb2, 0xb1, 0xe9, 0xf2,
	0xd0, 0xaa, 0xde, 0x0b, 0xfc, 0x1c, 0x27, 0x93, 0xf9, 0x2f, 0x4f, 0xc7, 0x58, 0x45, 0xcf, 0x3d,
	0xf8, 0x19, 0x00, 0x00, 0xff, 0xff, 0xbb, 0x79, 0xec, 0xee, 0x5a, 0x04, 0x00, 0x00,
}

func (m *KeyringEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyringEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyringEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Item != nil {
		{
			size := m.Item.Size()
			i -= size
			if _, err := m.Item.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KeyringEntry_Local) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyringEntry_Local) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Local != nil {
		{
			size, err := m.Local.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *KeyringEntry_Ledger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyringEntry_Ledger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Ledger != nil {
		{
			size, err := m.Ledger.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *KeyringEntry_Offline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyringEntry_Offline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Offline != nil {
		{
			size, err := m.Offline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *KeyringEntry_Multi) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KeyringEntry_Multi) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.Multi != nil {
		{
			size, err := m.Multi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *LocalInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LocalInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LocalInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algo != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Algo))
		i--
		dAtA[i] = 0x10
	}
	if m.PrivKey != nil {
		{
			size, err := m.PrivKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LedgerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LedgerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LedgerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algo != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Algo))
		i--
		dAtA[i] = 0x10
	}
	if m.Path != nil {
		{
			size, err := m.Path.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BIP44Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BIP44Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BIP44Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Adressindex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Adressindex))
		i--
		dAtA[i] = 0x28
	}
	if m.Change {
		i--
		if m.Change {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Account != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Account))
		i--
		dAtA[i] = 0x18
	}
	if m.Cointype != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Cointype))
		i--
		dAtA[i] = 0x10
	}
	if m.Purpose != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Purpose))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OfflineInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OfflineInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OfflineInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Algo != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Algo))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MultiInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultiInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultiInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *KeyringEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Item != nil {
		n += m.Item.Size()
	}
	return n
}

func (m *KeyringEntry_Local) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Local != nil {
		l = m.Local.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *KeyringEntry_Ledger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ledger != nil {
		l = m.Ledger.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *KeyringEntry_Offline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offline != nil {
		l = m.Offline.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *KeyringEntry_Multi) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Multi != nil {
		l = m.Multi.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}
func (m *LocalInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PrivKey != nil {
		l = m.PrivKey.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Algo != 0 {
		n += 1 + sovTypes(uint64(m.Algo))
	}
	return n
}

func (m *LedgerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Path != nil {
		l = m.Path.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Algo != 0 {
		n += 1 + sovTypes(uint64(m.Algo))
	}
	return n
}

func (m *BIP44Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Purpose != 0 {
		n += 1 + sovTypes(uint64(m.Purpose))
	}
	if m.Cointype != 0 {
		n += 1 + sovTypes(uint64(m.Cointype))
	}
	if m.Account != 0 {
		n += 1 + sovTypes(uint64(m.Account))
	}
	if m.Change {
		n += 2
	}
	if m.Adressindex != 0 {
		n += 1 + sovTypes(uint64(m.Adressindex))
	}
	return n
}

func (m *OfflineInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Algo != 0 {
		n += 1 + sovTypes(uint64(m.Algo))
	}
	return n
}

func (m *MultiInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *KeyringEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyringEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyringEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &types.Any{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Local", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LocalInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &KeyringEntry_Local{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &LedgerInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &KeyringEntry_Ledger{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &OfflineInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &KeyringEntry_Offline{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MultiInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Item = &KeyringEntry_Multi{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LocalInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LocalInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LocalInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrivKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PrivKey == nil {
				m.PrivKey = &types.Any{}
			}
			if err := m.PrivKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= PubKeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LedgerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LedgerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LedgerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Path == nil {
				m.Path = &BIP44Params{}
			}
			if err := m.Path.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= PubKeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BIP44Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BIP44Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BIP44Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			m.Purpose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purpose |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cointype", wireType)
			}
			m.Cointype = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cointype |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Account |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Change = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adressindex", wireType)
			}
			m.Adressindex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Adressindex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OfflineInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OfflineInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OfflineInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algo", wireType)
			}
			m.Algo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algo |= PubKeyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MultiInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultiInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultiInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
